import path from 'path';
import colors from 'picocolors';
import { preview } from 'vite';

function info(message) {
  console.log(`${colors.dim("[vite-plugin-pdf]")} ${message}`);
}
function println(message) {
  console.log(message);
}

async function exportPDF(option) {
  console.log();
  info(colors.yellow("Start exporting PDFs..."));
  if (!option.pages) {
    return;
  }
  const pages = resolvePages(option.pages);
  info(colors.yellow("Create preview server..."));
  const server = await preview({
    preview: {
      open: false
    }
  });
  const addr = server.httpServer.address();
  if (!addr || typeof addr !== "object") {
    throw new Error("Start preivew server fail");
  }
  const baseURL = `http://${addr.address}:${addr.port}`;
  info(colors.green(`Preview server is created.`));
  {
    info(colors.yellow("Launch browser..."));
    const browser = await launch();
    const context = await browser.newContext({
      baseURL,
      deviceScaleFactor: 1
    });
    info(
      colors.green(`Browser is launched. (${browser.browserType().name()} ${browser.version()})`)
    );
    const page = await context.newPage();
    info(`${colors.yellow("Exporting PDFs...")} ${colors.blue(`(${pages.length})`)}`);
    for (const p of pages) {
      await page.goto(p.url, { waitUntil: "networkidle" });
      const output = path.join(option.outDir, p.name);
      await page.pdf({ ...option.pdf, path: output });
      println(
        `${colors.cyan(p.url)} -> ${path.dirname(output)}/${colors.cyan(path.basename(output))}`
      );
    }
    browser.close();
  }
  server.httpServer.close();
  info(colors.green("Export PDFs finished."));
}
async function launch() {
  const { chromium } = await import('playwright');
  const browser = await chromium.launch();
  return browser;
}
function resolvePages(page) {
  const resolvePath = (path2) => {
    path2 = path2.replace(/\\/g, "/");
    if (path2.endsWith("/"))
      path2 += "index";
    if (path2.startsWith("/"))
      path2 = path2.slice(1);
    path2 = path2.replace(/\//g, "__");
    return path2;
  };
  const ensureExt = (path2) => path2.endsWith(".pdf") ? path2 : path2 + ".pdf";
  if (typeof page === "string") {
    return [
      {
        name: ensureExt(resolvePath(page)),
        url: page
      }
    ];
  } else if (Array.isArray(page)) {
    return page.map((page2) => {
      if (typeof page2 === "string") {
        return {
          name: ensureExt(resolvePath(page2)),
          url: page2
        };
      } else {
        return {
          name: ensureExt(page2.name ?? resolvePath(page2.url)),
          url: page2.url
        };
      }
    });
  } else {
    return [
      {
        name: ensureExt(page.name ?? resolvePath(page.url)),
        url: page.url
      }
    ];
  }
}

function PDF(option) {
  return {
    name: "vite-plugin-pdf",
    apply: "build",
    configResolved(config) {
      if (!option.outDir) {
        option.outDir = config.build.outDir;
      }
    },
    async closeBundle() {
      await exportPDF(option);
    }
  };
}

export { PDF as default };
